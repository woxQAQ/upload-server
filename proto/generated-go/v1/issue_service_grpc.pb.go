// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/issue_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssueService_GetIssueDetail_FullMethodName             = "/woxqaq.v1.IssueService/GetIssueDetail"
	IssueService_ListIssue_FullMethodName                  = "/woxqaq.v1.IssueService/ListIssue"
	IssueService_SubmitIssue_FullMethodName                = "/woxqaq.v1.IssueService/SubmitIssue"
	IssueService_Approve_FullMethodName                    = "/woxqaq.v1.IssueService/Approve"
	IssueService_Reject_FullMethodName                     = "/woxqaq.v1.IssueService/Reject"
	IssueService_ListApproveConfig_FullMethodName          = "/woxqaq.v1.IssueService/ListApproveConfig"
	IssueService_UpdateApproveRequestConfig_FullMethodName = "/woxqaq.v1.IssueService/UpdateApproveRequestConfig"
)

// IssueServiceClient is the client API for IssueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueServiceClient interface {
	GetIssueDetail(ctx context.Context, in *GetIssueDetailRequest, opts ...grpc.CallOption) (*GetIssueDetailResponse, error)
	ListIssue(ctx context.Context, in *ListIssueRequest, opts ...grpc.CallOption) (*ListIssueResponse, error)
	SubmitIssue(ctx context.Context, in *SubmitIssueRequest, opts ...grpc.CallOption) (*SubmitIssueResponse, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*RejectResponse, error)
	ListApproveConfig(ctx context.Context, in *ListApproveConfigRequest, opts ...grpc.CallOption) (*ListApproveConfigResponse, error)
	UpdateApproveRequestConfig(ctx context.Context, in *UpdateApproveNotifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type issueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueServiceClient(cc grpc.ClientConnInterface) IssueServiceClient {
	return &issueServiceClient{cc}
}

func (c *issueServiceClient) GetIssueDetail(ctx context.Context, in *GetIssueDetailRequest, opts ...grpc.CallOption) (*GetIssueDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIssueDetailResponse)
	err := c.cc.Invoke(ctx, IssueService_GetIssueDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) ListIssue(ctx context.Context, in *ListIssueRequest, opts ...grpc.CallOption) (*ListIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIssueResponse)
	err := c.cc.Invoke(ctx, IssueService_ListIssue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) SubmitIssue(ctx context.Context, in *SubmitIssueRequest, opts ...grpc.CallOption) (*SubmitIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitIssueResponse)
	err := c.cc.Invoke(ctx, IssueService_SubmitIssue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, IssueService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*RejectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectResponse)
	err := c.cc.Invoke(ctx, IssueService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) ListApproveConfig(ctx context.Context, in *ListApproveConfigRequest, opts ...grpc.CallOption) (*ListApproveConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApproveConfigResponse)
	err := c.cc.Invoke(ctx, IssueService_ListApproveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) UpdateApproveRequestConfig(ctx context.Context, in *UpdateApproveNotifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IssueService_UpdateApproveRequestConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueServiceServer is the server API for IssueService service.
// All implementations must embed UnimplementedIssueServiceServer
// for forward compatibility.
type IssueServiceServer interface {
	GetIssueDetail(context.Context, *GetIssueDetailRequest) (*GetIssueDetailResponse, error)
	ListIssue(context.Context, *ListIssueRequest) (*ListIssueResponse, error)
	SubmitIssue(context.Context, *SubmitIssueRequest) (*SubmitIssueResponse, error)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	Reject(context.Context, *RejectRequest) (*RejectResponse, error)
	ListApproveConfig(context.Context, *ListApproveConfigRequest) (*ListApproveConfigResponse, error)
	UpdateApproveRequestConfig(context.Context, *UpdateApproveNotifyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIssueServiceServer()
}

// UnimplementedIssueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssueServiceServer struct{}

func (UnimplementedIssueServiceServer) GetIssueDetail(context.Context, *GetIssueDetailRequest) (*GetIssueDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueDetail not implemented")
}
func (UnimplementedIssueServiceServer) ListIssue(context.Context, *ListIssueRequest) (*ListIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssue not implemented")
}
func (UnimplementedIssueServiceServer) SubmitIssue(context.Context, *SubmitIssueRequest) (*SubmitIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIssue not implemented")
}
func (UnimplementedIssueServiceServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedIssueServiceServer) Reject(context.Context, *RejectRequest) (*RejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedIssueServiceServer) ListApproveConfig(context.Context, *ListApproveConfigRequest) (*ListApproveConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApproveConfig not implemented")
}
func (UnimplementedIssueServiceServer) UpdateApproveRequestConfig(context.Context, *UpdateApproveNotifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApproveRequestConfig not implemented")
}
func (UnimplementedIssueServiceServer) mustEmbedUnimplementedIssueServiceServer() {}
func (UnimplementedIssueServiceServer) testEmbeddedByValue()                      {}

// UnsafeIssueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueServiceServer will
// result in compilation errors.
type UnsafeIssueServiceServer interface {
	mustEmbedUnimplementedIssueServiceServer()
}

func RegisterIssueServiceServer(s grpc.ServiceRegistrar, srv IssueServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssueService_ServiceDesc, srv)
}

func _IssueService_GetIssueDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).GetIssueDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_GetIssueDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).GetIssueDetail(ctx, req.(*GetIssueDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_ListIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_ListIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListIssue(ctx, req.(*ListIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_SubmitIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).SubmitIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_SubmitIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).SubmitIssue(ctx, req.(*SubmitIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).Reject(ctx, req.(*RejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_ListApproveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApproveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListApproveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_ListApproveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListApproveConfig(ctx, req.(*ListApproveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_UpdateApproveRequestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApproveNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).UpdateApproveRequestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_UpdateApproveRequestConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).UpdateApproveRequestConfig(ctx, req.(*UpdateApproveNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueService_ServiceDesc is the grpc.ServiceDesc for IssueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "woxqaq.v1.IssueService",
	HandlerType: (*IssueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssueDetail",
			Handler:    _IssueService_GetIssueDetail_Handler,
		},
		{
			MethodName: "ListIssue",
			Handler:    _IssueService_ListIssue_Handler,
		},
		{
			MethodName: "SubmitIssue",
			Handler:    _IssueService_SubmitIssue_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _IssueService_Approve_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _IssueService_Reject_Handler,
		},
		{
			MethodName: "ListApproveConfig",
			Handler:    _IssueService_ListApproveConfig_Handler,
		},
		{
			MethodName: "UpdateApproveRequestConfig",
			Handler:    _IssueService_UpdateApproveRequestConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/issue_service.proto",
}
