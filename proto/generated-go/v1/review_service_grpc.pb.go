// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/review_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReviewServive_ListReviewGroups_FullMethodName  = "/woxqaq.v1.ReviewServive/ListReviewGroups"
	ReviewServive_CreateReviewGroup_FullMethodName = "/woxqaq.v1.ReviewServive/CreateReviewGroup"
	ReviewServive_UpdateReviewGroup_FullMethodName = "/woxqaq.v1.ReviewServive/UpdateReviewGroup"
	ReviewServive_DeleteReviewGroup_FullMethodName = "/woxqaq.v1.ReviewServive/DeleteReviewGroup"
)

// ReviewServiveClient is the client API for ReviewServive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiveClient interface {
	ListReviewGroups(ctx context.Context, in *ListReviewGroupsRequest, opts ...grpc.CallOption) (*ListReviewGroupsResponse, error)
	CreateReviewGroup(ctx context.Context, in *ReviewGroup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateReviewGroup(ctx context.Context, in *ReviewGroup, opts ...grpc.CallOption) (*ReviewGroup, error)
	DeleteReviewGroup(ctx context.Context, in *DeleteReviewGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type reviewServiveClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiveClient(cc grpc.ClientConnInterface) ReviewServiveClient {
	return &reviewServiveClient{cc}
}

func (c *reviewServiveClient) ListReviewGroups(ctx context.Context, in *ListReviewGroupsRequest, opts ...grpc.CallOption) (*ListReviewGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReviewGroupsResponse)
	err := c.cc.Invoke(ctx, ReviewServive_ListReviewGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiveClient) CreateReviewGroup(ctx context.Context, in *ReviewGroup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReviewServive_CreateReviewGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiveClient) UpdateReviewGroup(ctx context.Context, in *ReviewGroup, opts ...grpc.CallOption) (*ReviewGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewGroup)
	err := c.cc.Invoke(ctx, ReviewServive_UpdateReviewGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiveClient) DeleteReviewGroup(ctx context.Context, in *DeleteReviewGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReviewServive_DeleteReviewGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiveServer is the server API for ReviewServive service.
// All implementations must embed UnimplementedReviewServiveServer
// for forward compatibility.
type ReviewServiveServer interface {
	ListReviewGroups(context.Context, *ListReviewGroupsRequest) (*ListReviewGroupsResponse, error)
	CreateReviewGroup(context.Context, *ReviewGroup) (*emptypb.Empty, error)
	UpdateReviewGroup(context.Context, *ReviewGroup) (*ReviewGroup, error)
	DeleteReviewGroup(context.Context, *DeleteReviewGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedReviewServiveServer()
}

// UnimplementedReviewServiveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReviewServiveServer struct{}

func (UnimplementedReviewServiveServer) ListReviewGroups(context.Context, *ListReviewGroupsRequest) (*ListReviewGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviewGroups not implemented")
}
func (UnimplementedReviewServiveServer) CreateReviewGroup(context.Context, *ReviewGroup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReviewGroup not implemented")
}
func (UnimplementedReviewServiveServer) UpdateReviewGroup(context.Context, *ReviewGroup) (*ReviewGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReviewGroup not implemented")
}
func (UnimplementedReviewServiveServer) DeleteReviewGroup(context.Context, *DeleteReviewGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReviewGroup not implemented")
}
func (UnimplementedReviewServiveServer) mustEmbedUnimplementedReviewServiveServer() {}
func (UnimplementedReviewServiveServer) testEmbeddedByValue()                       {}

// UnsafeReviewServiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiveServer will
// result in compilation errors.
type UnsafeReviewServiveServer interface {
	mustEmbedUnimplementedReviewServiveServer()
}

func RegisterReviewServiveServer(s grpc.ServiceRegistrar, srv ReviewServiveServer) {
	// If the following call pancis, it indicates UnimplementedReviewServiveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReviewServive_ServiceDesc, srv)
}

func _ReviewServive_ListReviewGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiveServer).ListReviewGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewServive_ListReviewGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiveServer).ListReviewGroups(ctx, req.(*ListReviewGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewServive_CreateReviewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiveServer).CreateReviewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewServive_CreateReviewGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiveServer).CreateReviewGroup(ctx, req.(*ReviewGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewServive_UpdateReviewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiveServer).UpdateReviewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewServive_UpdateReviewGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiveServer).UpdateReviewGroup(ctx, req.(*ReviewGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewServive_DeleteReviewGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiveServer).DeleteReviewGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewServive_DeleteReviewGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiveServer).DeleteReviewGroup(ctx, req.(*DeleteReviewGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewServive_ServiceDesc is the grpc.ServiceDesc for ReviewServive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewServive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "woxqaq.v1.ReviewServive",
	HandlerType: (*ReviewServiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReviewGroups",
			Handler:    _ReviewServive_ListReviewGroups_Handler,
		},
		{
			MethodName: "CreateReviewGroup",
			Handler:    _ReviewServive_CreateReviewGroup_Handler,
		},
		{
			MethodName: "UpdateReviewGroup",
			Handler:    _ReviewServive_UpdateReviewGroup_Handler,
		},
		{
			MethodName: "DeleteReviewGroup",
			Handler:    _ReviewServive_DeleteReviewGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/review_service.proto",
}
